"use client";

import { useEffect, useState } from "react";
import api from "@/lib/axios";
import { HabitCalendar } from "./HabitCalendar"; // <-- 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
import styles from "./HabitStatsModal.module.scss";

// –¢–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç API /habits/:id/stats
interface HabitStats {
  habitTitle: string;
  totalCompletions: number;
  currentStreak: number;
  longestStreak: number;
  completionHistory: string[]; // –ú–∞—Å—Å–∏–≤ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
}

// –¢–∏–ø –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—à –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
interface HabitStatsModalProps {
  habitId: string;
  onClose: () => void; // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
const HabitStatsView = ({ stats }: { stats: HabitStats }) => (
  <div>
    <h2>{stats.habitTitle}</h2>
    <div className={styles.statsContainer}>
      <div className={styles.statBox}>
        <div className={styles.statValue}>{stats.totalCompletions}</div>
        <div className={styles.statLabel}>–í—Å–µ–≥–æ</div>
      </div>
      <div className={styles.statBox}>
        <div className={styles.statValue}>üî• {stats.currentStreak}</div>
        <div className={styles.statLabel}>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è</div>
      </div>
      <div className={styles.statBox}>
        <div className={styles.statValue}>üèÜ {stats.longestStreak}</div>
        <div className={styles.statLabel}>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è</div>
      </div>
    </div>
    {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è --- */}
    <h4>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:</h4>
    <HabitCalendar completionHistory={stats.completionHistory} />
    {/* --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô --- */}
  </div>
);

export const HabitStatsModal = ({ habitId, onClose }: HabitStatsModalProps) => {
  const [stats, setStats] = useState<HabitStats | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchStats = async () => {
      if (!habitId) return;
      try {
        setIsLoading(true);
        setError("");
        const response = await api.get<HabitStats>(`/habits/${habitId}/stats`);
        setStats(response.data);
      } catch (err) {
        setError("Failed to load stats.");
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    };
    fetchStats();
  }, [habitId]);

  const renderContent = () => {
    if (isLoading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>;
    if (error) return <p style={{ color: "red" }}>{error}</p>;
    if (stats) return <HabitStatsView stats={stats} />;
    return null;
  };

  return (
    <div className={styles.overlay} onClick={onClose}>
      <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
        <button className={styles.closeButton} onClick={onClose}>
          &times;
        </button>
        {renderContent()}
      </div>
    </div>
  );
};
